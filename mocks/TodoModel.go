// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	model "github.com/anxmukul/todo/model"
	mock "github.com/stretchr/testify/mock"
)

// TodoModel is an autogenerated mock type for the TodoModel type
type TodoModel struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: _a0, _a1
func (_m *TodoModel) CreateTodo(_a0 string, _a1 string) (*model.ToDo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.ToDo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.ToDo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.ToDo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ToDo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByTitle provides a mock function with given fields: _a0
func (_m *TodoModel) DeleteByTitle(_a0 string) (*model.ToDo, error) {
	ret := _m.Called(_a0)

	var r0 *model.ToDo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ToDo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ToDo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ToDo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodoById provides a mock function with given fields: _a0
func (_m *TodoModel) GetTodoById(_a0 int64) (*model.ToDo, error) {
	ret := _m.Called(_a0)

	var r0 *model.ToDo
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*model.ToDo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) *model.ToDo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ToDo)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodoByTitle provides a mock function with given fields: _a0
func (_m *TodoModel) GetTodoByTitle(_a0 string) (*[]model.ToDo, error) {
	ret := _m.Called(_a0)

	var r0 *[]model.ToDo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]model.ToDo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *[]model.ToDo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.ToDo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTodoModel creates a new instance of TodoModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoModel {
	mock := &TodoModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
